@InProceedings{AlShabibi:2003:POOS,
        AUTHOR             = {Ali Al-Shabibi and Didier Buchs and Mathieu Buffo and Stanislav Chachkov and Ang Chen and David Hurzeler},
        TITLE              = {Prototyping Object-Oriented Specifications},
        BOOKTITLE          = {Proceedings of the International Conference on Theory and Application of Petri Nets, Eindhoven, Netherlands},
        KEYWORDS           = {Conform},
        PAGES              = {473--482},
        YEAR               = {2003},
        EDITOR             = {Wil M. P. van der Aalst and Eike Best},
        VOLUME             = {2679},
        SERIES             = {LNCS (Lecture Notes in Computer Science)},
        MONTH              = {June},
        PUBLISHER          = {Springer Verlag},
        URL                = {http://link.springer.de/link/service/series/0558/bibs/2679/26790473.htm},
	ABSTRACT           = {CoopnBuilder is an integrated development environment (IDE) for Concurrent Object Oriented Petri Nets (COOPN). It comes with a complete set of tools enabling the user to view, edit, check, simulate and generate code from CO-OPN specifications. The Code Generation tool allows the user to develop applications in an open way: the produced code can be integrated in larger projects or use existing libraries. The code generation will be emphasized in this paper, and we will focus on ease-of-use and extensibility. CoopnBuilder is an open-source Java program and can be downloaded from <a href="http://cui.unige.ch/smv/">http://cui.unige.ch/smv</a>}
}

@ARTICLE{Barbey93,
        AUTHOR             = {St{\'e}phane Barbey and Magnus Kempe and Alfred Strohmeier},
        JOURNAL            = {SI-Information},
        MONTH              = sep,
        NUMBER             = {40},
        PAGES              = {21--23},
        TITLE              = {Ada: {Y}oung, {S}mart and {E}volving},
        YEAR               = {1993},
        KEYWORDS           = {Paper, Ada},
        ABSTRACT           = {The Ada language is now 10 years old, like SI and SI-Information. A free compiler, called GNAT, will soon be available from the Free Software Foundation (GNU). Ada is heavily used in high-tech applications. After 10 years, it was felt Ada should be revised. This revision is well on its way, and we describe here the structure of the revised language definition, as well as an overview of the object-oriented features of the language.}
}

@PHDTHESIS{Barbey97,
        AUTHOR             = {St{\'e}phane Barbey},
        ADDRESS            = {D{\'e}partement d'Informatique, 1015 Lausanne, Switzerland},
        SCHOOL             = {Ecole Polytechnique F{\'e}d{\'e}rale de Lausanne},
        NUMBER             = {1753},
        TITLE              = {Test Selection for Specification-Based Testing of Object-Oriented Software Based on Formal Specifications},
        YEAR               = {1997},
        KEYWORDS           = {OOMethod, Testing, Conform, PhD},
        URL                = {http://lgl.epfl.ch/pub/Papers/barbey-thesis.pdf},
        ABSTRACT           = {Traditional testing techniques cannot be directly applied to object-oriented software systems because of some features of this paradigm, namely history, encapsulation, inheritance and polymorphism. We propose a specification based strategy for test selection to verify the interactions of the methods of an object or of a cluster of objects. Its essence is to perform selection as a reduction process. The exhaustive test set which serves as reference of correctness is transformed into a practicable test set by applying hypotheses on the program under test. The number of cases that must be tested is reduced while preserving the integrity of the test set. The oracle is implemented as an observational equivalence, which allows disregarding the internal representation of objects. <p> Besides analyzing the problems induced by the object-oriented paradigm, the main contribution of the thesis is to present a set of hypotheses specific to object-oriented systems. Regularity hypotheses are m:n generalizations of the program behavior and allow specifying the shape of test cases. Uniformity hypotheses are 1:n generalizations of the program behavior. Used in conjunction with subdomain decomposition, they ensure a good coverage of the specification. Incrementallity hypotheses are applied to take advantage of the hierarchy relationships inside object models by reusing test cases already selected for parent classes to test subclasses. Other hypotheses are proposed to limit the impact of polymorphism by taking into account the properties of the subtyping relationships. <p> For further information, please go to <a href="http://lgl.epfl.ch/Team/SB/PhD">my PhD home page</a>.}
}
