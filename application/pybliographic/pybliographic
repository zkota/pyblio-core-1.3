#!/usr/bin/python
# This file is part of pybliographer
# 
# Copyright (C) 1998-2003 Frederic GOBRY
# Email : gobry@pybliographer.org
# 	   
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2 
# of the License, or (at your option) any later version.
#   
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details. 
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 

""" Main module for pybliographic.

This module handles the set of opened documents.
"""

import sys

from PyblioUI.Gnome import Document
from Pyblio import Registry

from optparse import OptionParser

parser = OptionParser()
parser.add_option("-P", "--profile", dest="profile",
                  action="store_true", default=False,
                  help="profile the application")

(options, files) = parser.parse_args()

Registry.parse(Registry.RIP_dirs['system-rips'])

try:
    Registry.parse(Registry.RIP_dirs['user-rips'])
except OSError:
    pass


from PyblioUI import Gnome


docs = []

def _on_close (doc):

    docs.remove (doc)
    if not docs: Gnome.exit ()

    return

def _on_quit (doc):

    for d in docs[:]:
        d.close ()

    return


if files:
    for f in files:
        d = Document.Document ()
        d.open (f, None)
        
        d.register ('close', _on_close)
        d.register ('quit', _on_quit)
        
        docs.append (d)

else:
    d = Document.Document ()
    d.register ('close', _on_close)
    d.register ('quit', _on_quit)
    
    docs.append (d)

    d.create()


if options.profile:
    import hotshot
    p = hotshot.Profile('+pybliographic.prof')
    p.runcall(Gnome.run)

else:
    Gnome.run ()
